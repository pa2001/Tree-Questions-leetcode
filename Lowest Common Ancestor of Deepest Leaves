/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
TreeNode* lca(TreeNode* root,TreeNode* x,TreeNode* y)
    {
        if(!root)
            return NULL;
        if(root==x||root==y)
            return root;
        TreeNode* left=lca(root->left,x,y);
        TreeNode* right=lca(root->right,x,y);
        if(left&&right)
            return root;
        else if(left!=NULL)
            return left;
        return right;
    }
    TreeNode* lcaDeepestLeaves(TreeNode* root) {
       if(root==NULL)
           return NULL;
        queue<TreeNode*>q;
        q.push(root);
        vector<TreeNode*>v;
        while(!q.empty())
        {
            vector<TreeNode*>ans;
            int n=q.size();
            for(int i=0;i<n;i++)
            {
                TreeNode* curr=q.front();
                q.pop();
                ans.push_back(curr);
                if(curr->left)
                q.push(curr->left);
                if(curr->right)
                    q.push(curr->right);
            }v=ans;
        }if(v.size()==1)
            return v.front();
        TreeNode* l=v.front();
        TreeNode* r=v.back();
        return lca(root,l,r);        
    }
};
