/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class CBTInserter {
public:
    TreeNode* root;
    CBTInserter(TreeNode* root) {
        this->root=root;
    }
    
    int insert(int v) {
        if(root==NULL)
        {
            root=new TreeNode(v);
            return -1;
        }
        else
        {
            queue<TreeNode*>q;
            q.push(root);
            while(!q.empty())
            {
                int n=q.size();
                while(n--)
                {
                    TreeNode* p=q.front();
                    q.pop();
                    if(p->left)
                        q.push(p->left);
                    else
                    {
                        p->left=new TreeNode(v);
                        return p->val;
                    }
                    if(p->right)
                        q.push(p->right);
                    else
                    {
                        p->right=new TreeNode(v);
                        return p->val;
                    }
                }
            }
        }return -1;
    }
    
    TreeNode* get_root() {
        return root;
    }
};

/**
 * Your CBTInserter object will be instantiated and called as such:
 * CBTInserter* obj = new CBTInserter(root);
 * int param_1 = obj->insert(val);
 * TreeNode* param_2 = obj->get_root();
 */
