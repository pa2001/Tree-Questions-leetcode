/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    map<int,int>m;
    int solve(TreeNode* root)
    {
        if(!root)
            return 0;
        int left=solve(root->left);
        int right=solve(root->right);
        m[root->val+left+right]++;
        return root->val+left+right;
    }
    vector<int> findFrequentTreeSum(TreeNode* root) {
        vector<int>v;
        int ans=solve(root);
        int mn=INT_MIN;
        for(auto x:m)
        {
            if(x.second>mn)
                mn=x.second;
        }
        for(auto x:m)
        {
            if(x.second==mn)
                v.push_back(x.first);
        }
        return v;
    }
};
