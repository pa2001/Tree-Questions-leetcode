/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* solve(TreeNode* root,TreeNode* l,TreeNode* r)
    {
        if(!root)
            return NULL;
        if(root==l||root==r)
            return root;
        TreeNode* left=solve(root->left,l,r);
        TreeNode* right=solve(root->right,l,r);
        if(left&&right)
            return root;
        else if(!left)
            return right;
        return left;
    }
    TreeNode* subtreeWithAllDeepest(TreeNode* root) {
        if(!root)
            return NULL;
        queue<TreeNode*>q;
        q.push(root);
        vector<TreeNode*>k;
        while(!q.empty())
        {
            int n=q.size();
            vector<TreeNode*>v;
            for(int i=0;i<n;i++)
            {
                TreeNode* p=q.front();
                q.pop();
                v.push_back(p);
                if(p->left)
                    q.push(p->left);
                if(p->right)
                    q.push(p->right);
            }k=v;
        }
        if(k.size()==1)
            return k[0];
        TreeNode* l=k[0];
        TreeNode* r=k[k.size()-1];
        return solve(root,l,r);
    }
};
